# -*- coding: utf-8 -*-
"""air_quality_pipeline_dag

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11DLeeMuX1BRNAQWXVUrhD8jzas6MRsxq
"""

from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.google.cloud.transfers.local_to_gcs import LocalFilesystemToGCSOperator
from airflow.providers.google.cloud.operators.bigquery import BigQueryInsertJobOperator
from airflow.providers.google.cloud.transfers.gcs_to_bigquery import GCSToBigQueryOperator
from airflow.models import Variable
from datetime import datetime, timedelta
import requests
import pandas as pd

# DAG 기본 설정
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2025, 7, 14),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

with DAG(
    'air_quality_pipeline_dag',
    default_args=default_args,
    description='Airflow DAG for Air Quality Data Pipeline',
    schedule_interval='@hourly',
    catchup=False,
    tags=['air_quality', 'automation'],
) as dag:

    # API 호출 함수
    def fetch_air_quality_data(**context):
        api_key = Variable.get("ENVIRONMENT_API_KEY")  # 환경공단 API Key
        url = f"http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty"
        params = {
            'serviceKey': api_key,
            'returnType': 'json',
            'sidoName': '서울',
            'numOfRows': 1000,
            'pageNo': 1
        }

        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()

        json_data = response.json()
        items = json_data.get('response', {}).get('body', {}).get('items', [])

        if not items:
            raise ValueError("API 응답에 데이터가 없습니다.")

        df = pd.DataFrame(items)
        local_file_path = '/home/airflow/gcs/data/air_quality.csv'
        df.to_csv(local_file_path, index=False)
        context['ti'].xcom_push(key='local_file_path', value=local_file_path)

    # 1️⃣ 데이터 수집 및 CSV 저장
    fetch_data_task = PythonOperator(
        task_id='fetch_air_quality_data',
        python_callable=fetch_air_quality_data,
        provide_context=True,
    )

    # 2️⃣ GCS로 CSV 업로드
    upload_to_gcs_task = LocalFilesystemToGCSOperator(
        task_id='upload_air_quality_to_gcs',
        src='/home/airflow/gcs/data/air_quality.csv',
        dst='data/air_quality.csv',
        bucket='us-central1-airflow-final-d5ea4b16-bucket'
    )

    # 3️⃣ GCS → BigQuery 적재
    load_to_bq_task = GCSToBigQueryOperator(
        task_id='load_air_quality_to_bigquery',
        bucket='us-central1-airflow-final-d5ea4b16-bucket',
        source_objects=['data/air_quality.csv'],
        destination_project_dataset_table='crested-bonfire-464501-k8.air_quality_dataset.air_quality',
        schema_fields=[
            {'name': 'stationName', 'type': 'STRING', 'mode': 'NULLABLE'},
            {'name': 'sidoName', 'type': 'STRING', 'mode': 'NULLABLE'},
            {'name': 'dataTime', 'type': 'STRING', 'mode': 'NULLABLE'},
            {'name': 'so2Value', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'coValue', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'o3Value', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'no2Value', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'pm10Value', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'pm25Value', 'type': 'FLOAT', 'mode': 'NULLABLE'},
            {'name': 'khaiValue', 'type': 'STRING', 'mode': 'NULLABLE'},
            {'name': 'khaiGrade', 'type': 'STRING', 'mode': 'NULLABLE'},
        ],
        write_disposition='WRITE_TRUNCATE',
        skip_leading_rows=1,
        source_format='CSV',
        create_disposition='CREATE_IF_NEEDED'
    )

    # 4️⃣ BigQuery View 생성
    create_views_task = BigQueryInsertJobOperator(
        task_id='create_air_quality_views',
        configuration={
            "query": {
                "query": """
                -- KPI Summary View
                CREATE OR REPLACE VIEW `crested-bonfire-464501-k8.air_quality_dataset.kpi_summary_view` AS
                SELECT
                    COUNT(DISTINCT stationName) AS total_stations,
                    ROUND(AVG(SAFE_CAST(NULLIF(khaiValue, '-') AS FLOAT64)), 2) AS avg_khai,
                    SUM(CASE WHEN SAFE_CAST(khaiValue AS FLOAT64) >= 151 THEN 1 ELSE 0 END) AS alarm_count
                FROM `crested-bonfire-464501-k8.air_quality_dataset.air_quality`
                WHERE SAFE_CAST(khaiValue AS FLOAT64) IS NOT NULL;

                -- City Level Air Quality View
                CREATE OR REPLACE VIEW `crested-bonfire-464501-k8.air_quality_dataset.city_level_air_quality_view` AS
                SELECT
                    sidoName,
                    ROUND(AVG(SAFE_CAST(NULLIF(khaiValue, '-') AS FLOAT64)), 2) AS avg_khai,
                    MAX(TIMESTAMP(dataTime)) AS last_updated
                FROM `crested-bonfire-464501-k8.air_quality_dataset.air_quality`
                WHERE SAFE_CAST(khaiValue AS FLOAT64) IS NOT NULL
                GROUP BY sidoName;

                -- Station Trend View
                CREATE OR REPLACE VIEW `crested-bonfire-464501-k8.air_quality_dataset.station_trend_view` AS
                SELECT
                    stationName,
                    TIMESTAMP(dataTime) AS measurement_time,
                    SAFE_CAST(pm10Value AS FLOAT64) AS pm10,
                    SAFE_CAST(pm25Value AS FLOAT64) AS pm25,
                    SAFE_CAST(so2Value AS FLOAT64) AS so2,
                    SAFE_CAST(coValue AS FLOAT64) AS co,
                    SAFE_CAST(o3Value AS FLOAT64) AS o3,
                    SAFE_CAST(no2Value AS FLOAT64) AS no2,
                    SAFE_CAST(khaiValue AS FLOAT64) AS khai
                FROM `crested-bonfire-464501-k8.air_quality_dataset.air_quality`
                WHERE SAFE_CAST(khaiValue AS FLOAT64) IS NOT NULL;
                """,
                "useLegacySql": False
            }
        }
    )

    # 작업 순서 지정
    fetch_data_task >> upload_to_gcs_task >> load_to_bq_task >> create_views_task